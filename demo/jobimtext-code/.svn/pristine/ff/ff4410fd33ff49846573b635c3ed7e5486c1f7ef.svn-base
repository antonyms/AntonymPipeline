<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="build-common" default="default">



	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="descriptor" location="descriptor" />
	<property name="script" location="script" />
	<property name="pig" location="pig" />
	<property name="conf" location="conf" />
	<property name="model" location="model" />
	<property name="build" location="build" />
	<property name="version" value="0.0.7" />
	<property name="dist" location="../org.jobimtext.examples.oss/jobimtext_pipeline_${version}" />
	<property name="dist_jar" location="${dist}/lib" />

	<import file="dependencies.xml" />

	<path id="class.path">
		<fileset dir="${dist_jar}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="default" depends="dist" />

	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<delete dir="${build}" />
	</target>

	<target name="clean" depends="init">
		<echo message="${ant.project.name} - build-common.clean" />
		<mkdir dir="${dist}" />
		<mkdir dir="${dist_jar}" />
		<mkdir dir="${build}" />

		<!-- copy the jars in lib into the ${dist} folder -->
		<copy todir="${dist_jar}">
			<fileset dir="../org.jobimtext.thirdparty/lib/">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${dist_jar}">
			<fileset dir="../crf/lib/">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${dist_jar}">
			<fileset dir="../com.ibm.sai.distributional_similarity.api.lite/lib/">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${dist_jar}">
			<fileset dir="../org.jobimtext/lib/">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- <javac srcdir="${src}" destdir="${build}" /> -->
	</target>

	<target name="dist.dependencies">
		<echo message="depend.${ant.project.name} - build-common.depend" />
		<delete dir="${dist}" />
		<antcall target="depend.${ant.project.name}" />
	</target>

	<!-- compile the code within ${src} and output it to ${build} -->
	<target name="compile" depends="clean">
		<echo message="${src} - build-common.compile" />
		<javac srcdir="${src}" destdir="${build}" debug="true" debuglevel="lines,vars,source">
			<classpath refid="class.path" />
			<compilerarg value="-Xlint:-deprecation" />
		</javac>
	</target>

	<!-- copy the models, if available, into the ${build} path -->
	<target name="compile.model" depends="compile, model.check" if="model.exists">
		<echo>Model exists ${model}</echo>
		<copy todir="${build}">
			<fileset dir="${model}" />
		</copy>
	</target>

	<target name="copy.conf" depends="compile, conf.check" if="conf.exists">
		<echo>Model exists ${conf}</echo>
		<copy todir="${dist}">
			<fileset dir="${conf}" />
		</copy>
	</target>

	<!-- copy the descriptors, if available, into the ${build} path -->
	<target name="compile.descriptor" depends="compile, descriptor.check" if="descriptor.exists">
		<echo>Descriptor exists ${descriptor}</echo>
		<copy todir="${build}">
			<fileset dir="${descriptor}" />
		</copy>
	</target>

	<target name="copy.pig" depends="compile, pig.check" if="pig.exists">
		<echo>"Pig exists ${pig}"</echo>
		<mkdir dir="${dist}/pig" />
		<copy todir="${dist}/pig">
			<fileset dir="${pig}" />
		</copy>
	</target>

	<target name="copy.script" depends="compile, script.check" if="script.exists">
		<echo>Scripts exists in ${script}</echo>
		<copy todir="${dist}">
			<fileset dir="${script}" />
		</copy>

	</target>

	<!-- copy the jar file to ${dist} directory -->
	<target name="dist" depends="compile.model, compile.descriptor, copy.conf, copy.pig, copy.script">
		<echo message="${ant.project.name} - build-common.dist" />
		<jar jarfile="${dist_jar}/${ant.project.name}-${version}.jar" basedir="${build}" />
	</target>

	<!-- check if a model dir exists in the project -->
	<target name="model.check">
		<condition property="model.exists">
			<available file="${model}" type="dir" />
		</condition>
	</target>
	<!-- check if a descriptor dir exists in the project -->
	<target name="descriptor.check">
		<condition property="descriptor.exists">
			<available file="${descriptor}" type="dir" />
		</condition>
	</target>
	<!-- check if a pig dir exists in the project -->
	<target name="pig.check">
		<condition property="pig.exists">
			<available file="${pig}" type="dir" />
		</condition>
	</target>
	<!-- check if a script dir exists in the project -->
	<target name="script.check">
		<condition property="script.exists">
			<available file="${script}" type="dir" />
		</condition>
	</target>
	<target name="conf.check">
		<condition property="conf.exists">
			<available file="${conf}" type="dir" />
		</condition>
	</target>

	<!-- <replace file="${script}/generateHadoopScript.py" value="${dist_jar}/thesaurus.distributional.hadoop-${version}.jar">
		<replacetoken>thesaurus.distributional.hadoop.jar</replacetoken>
	</replace> -->


</project>
